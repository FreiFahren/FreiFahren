basePath: /
definitions:
  utils.AllStationsAndLinesList:
    properties:
      lines:
        items:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        type: array
      stations:
        additionalProperties:
          $ref: '#/definitions/utils.StationListEntry'
        type: object
    type: object
  utils.Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  utils.CoordinatesEntry:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  utils.Station:
    properties:
      coordinates:
        $ref: '#/definitions/utils.Coordinates'
      id:
        type: string
      lines:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  utils.StationListEntry:
    properties:
      coordinates:
        $ref: '#/definitions/utils.CoordinatesEntry'
      lines:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  utils.TicketInspectorResponse:
    properties:
      direction:
        $ref: '#/definitions/utils.Station'
      isHistoric:
        type: boolean
      line:
        description: String is used so that it can easily be handled by the frontend
        type: string
      message:
        type: string
      station:
        $ref: '#/definitions/utils.Station'
      timestamp:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for the FreiFahren project, responsible for collecting and serving
    data about ticket inspectors on public transport.
  title: FreiFahren API Documentation
  version: "1.0"
paths:
  /distance:
    get:
      consumes:
      - application/json
      description: |-
        Returns the shortest number of stations between an inspector's station and a given user's latitude and longitude coordinates.
        The distance calculation employs Dijkstra's algorithm to determine the minimal stops required to reach the nearest station from the given coordinates.
      parameters:
      - description: The station ID of the inspector's current location.
        in: query
        name: inspectorStationId
        required: true
        type: string
      - description: The latitude of the user's location.
        in: query
        name: userLat
        required: true
        type: string
      - description: The longitude of the user's location.
        in: query
        name: userLon
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The shortest distance in terms of the number of station stops
            between the inspector's station and the user's location.
          schema:
            type: int
        "500":
          description: An error occurred in processing the request.
      summary: Calculate shortest distance to a station
      tags:
      - Transit
  /id:
    get:
      consumes:
      - application/json
      description: |-
        Fetches the unique identifier for a station by its name from the StationsMap. This endpoint performs a case-insensitive search and ignores spaces in the station name.
        The Ids have format Line prefix that has the format "SU" followed by an abbreviation of the station name. For example "SU-A" for the station "Alexanderplatz".
      parameters:
      - description: Station name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The station id
          schema:
            type: string
        "404":
          description: Station not found
          schema:
            type: string
      summary: Retrieve Station ID by Name
      tags:
      - City Data
  /list:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint returns a comprehensive list of all train stations and lines.
        Optionally, it can return only a list of lines or stations based on the provided query parameters.
      parameters:
      - description: Set to 'true' to retrieve only the list of lines.
        in: query
        name: lines
        type: string
      - description: Set to 'true' to retrieve only the list of stations.
        in: query
        name: stations
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.AllStationsAndLinesList'
        "500":
          description: 'Internal Server Error: Unable to process the request.'
          schema:
            type: string
      summary: Retrieves stations and lines information
      tags:
      - City Data
  /recent:
    get:
      consumes:
      - application/json
      description: |-
        Fetches the most recent ticket inspector reports from the database and returns them as a JSON array.
        If there are not enough recent reports, the endpoint will fetch additional historic reports to meet the required amount.
        The required amount is determined by the current time of the day and the day of the week, ensuring the most relevant and timely information is provided to the user.
      parameters:
      - description: Standard HTTP header used to make conditional requests; the response
          will include the requested data only if it has changed since this date and
          time.
        in: header
        name: If-Modified-Since
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A JSON array of ticket inspector information, each entry includes
            details such as timestamp, station, direction, line, and historic flag.
          schema:
            items:
              $ref: '#/definitions/utils.TicketInspectorResponse'
            type: array
        "304":
          description: Returns an empty response indicating that the requested data
            has not changed since the time provided in the 'If-Modified-Since' header.
        "500":
          description: 'Internal Server Error: An error occurred while processing
            the request.'
          schema:
            type: string
      summary: Retrieve information about recent ticket inspector reports
      tags:
      - Basic Functions
  /station:
    get:
      consumes:
      - application/json
      description: |-
        Fetches the name of a station by its unique identifier from the StationsMap.
        The Ids have format Line prefix that has the format "SU" followed by an abbreviation of the station name. For example "SU-A" for the station "Alexanderplatz".
      parameters:
      - description: Station Id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The station id
          schema:
            type: string
        "404":
          description: Error getting station name
          schema:
            type: string
      summary: Retrieve Name by Station ID
      tags:
      - City Data
swagger: "2.0"
