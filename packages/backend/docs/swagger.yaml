definitions:
  feedback.FeedbackRequest:
    properties:
      feedback:
        type: string
    type: object
  feedback.FeedbackResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  itineraries.ItinerariesResponse:
    properties:
      alternativeItineraries:
        items:
          $ref: '#/definitions/itineraries.ResponseItinerary'
        type: array
      debugOutput:
        additionalProperties: true
        type: object
      from:
        $ref: '#/definitions/itineraries.ResponsePosition'
      requestParameters:
        additionalProperties: true
        type: object
      safestItinerary:
        $ref: '#/definitions/itineraries.ResponseItinerary'
      to:
        $ref: '#/definitions/itineraries.ResponsePosition'
    type: object
  itineraries.LegGeometry:
    properties:
      length:
        type: integer
      points:
        type: string
    type: object
  itineraries.ResponseItinerary:
    properties:
      calculated_risk:
        type: number
      duration:
        type: integer
      endTime:
        type: string
      legs:
        items:
          $ref: '#/definitions/itineraries.ResponseLeg'
        type: array
      startTime:
        type: string
      transfers:
        type: integer
    type: object
  itineraries.ResponseLeg:
    properties:
      duration:
        type: integer
      endTime:
        type: string
      from:
        $ref: '#/definitions/itineraries.ResponsePosition'
      intermediateStops:
        items:
          $ref: '#/definitions/itineraries.ResponsePosition'
        type: array
      legGeometry:
        $ref: '#/definitions/itineraries.LegGeometry'
      mode:
        type: string
      routeShortName:
        type: string
      scheduledEndTime:
        type: string
      scheduledStartTime:
        type: string
      startTime:
        type: string
      to:
        $ref: '#/definitions/itineraries.ResponsePosition'
    type: object
  itineraries.ResponsePosition:
    properties:
      arrival:
        type: string
      departure:
        type: string
      lat:
        type: number
      lon:
        type: number
      name:
        type: string
      scheduledArrival:
        type: string
      scheduledDeparture:
        type: string
      stopId:
        type: string
    type: object
  prediction.RiskData:
    properties:
      segments_risk:
        additionalProperties:
          $ref: '#/definitions/prediction.SegmentRisk'
        type: object
    type: object
  prediction.SegmentRisk:
    properties:
      color:
        type: string
      risk:
        type: number
    type: object
  statistics.Statistics:
    properties:
      numberOfReports:
        type: integer
    type: object
  utils.Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  utils.CoordinatesEntry:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  utils.GeoJSONCRS:
    properties:
      properties:
        additionalProperties: true
        type: object
      type:
        type: string
    type: object
  utils.InspectorRequest:
    properties:
      author:
        description: is always null or 98111116 (ASCII for "BOT") when getting data
          from the telegram bot
        type: integer
      directionId:
        type: string
      line:
        type: string
      message:
        type: string
      stationId:
        type: string
      timestamp:
        type: string
    type: object
  utils.ResponseData:
    properties:
      author:
        type: integer
      direction:
        $ref: '#/definitions/utils.Station'
      line:
        type: string
      message:
        type: string
      station:
        $ref: '#/definitions/utils.Station'
      timestamp:
        type: string
    type: object
  utils.SegmentFeature:
    properties:
      geometry:
        $ref: '#/definitions/utils.SegmentGeometry'
      properties:
        $ref: '#/definitions/utils.SegmentProperties'
      type:
        type: string
    type: object
  utils.SegmentGeometry:
    properties:
      coordinates:
        items:
          items:
            type: number
          type: array
        type: array
      type:
        type: string
    type: object
  utils.SegmentProperties:
    properties:
      line:
        type: string
      line_color:
        type: string
      sid:
        type: string
    type: object
  utils.SegmentsCollection:
    properties:
      crs:
        $ref: '#/definitions/utils.GeoJSONCRS'
      features:
        items:
          $ref: '#/definitions/utils.SegmentFeature'
        type: array
      name:
        type: string
      type:
        type: string
    type: object
  utils.Station:
    properties:
      coordinates:
        $ref: '#/definitions/utils.Coordinates'
      id:
        type: string
      lines:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  utils.StationListEntry:
    properties:
      coordinates:
        $ref: '#/definitions/utils.CoordinatesEntry'
      lines:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  utils.TicketInspectorResponse:
    properties:
      direction:
        $ref: '#/definitions/utils.Station'
      isHistoric:
        type: boolean
      line:
        description: String is used so that it can easily be handled by the frontend
        type: string
      message:
        type: string
      station:
        $ref: '#/definitions/utils.Station'
      timestamp:
        type: string
    type: object
  v0.v0RiskData:
    properties:
      last_modified:
        type: string
      segment_colors:
        additionalProperties:
          type: string
        type: object
    type: object
info:
  contact: {}
paths:
  /basics/inspectors:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint retrieves ticket inspector reports from the database within a specified time range.
        It supports filtering by start and end timestamps,
        and checks if the data has been modified since the last request using the "If-Modified-Since" header.
      parameters:
      - description: Start timestamp (RFC3339 format)
        in: query
        name: start
        type: string
      - description: End timestamp (RFC3339 format)
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.TicketInspectorResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Retrieve information about ticket inspector reports
      tags:
      - basics
    post:
      consumes:
      - application/json
      description: |-
        Accepts a JSON payload with details about a ticket inspector's current location.
        This endpoint validates the provided data, processes necessary computations for linking stations and lines,
        inserts the data into the database, and triggers an update to the risk model used in operational analysis.
        If the 'timestamp' field is not provided in the request, the current UTC time truncated to the nearest minute is used automatically.
        The endpoint also includes a rate limit to prevent abuse. The rate limit is based on the IP address of the request.
      parameters:
      - description: Data about the inspector's location and activity
        in: body
        name: inspectorData
        required: true
        schema:
          $ref: '#/definitions/utils.InspectorRequest'
      - description: Timestamp of the report in ISO 8601 format (e.g., 2006-01-02T15:04:05Z);
          if not provided, the current time is used
        in: query
        name: timestamp
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully processed and inserted the inspector data with
            computed linkages and risk model updates.
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: 'Bad Request: Missing or incorrect parameters provided.'
        "429":
          description: 'Too Many Requests: The request has been rate limited.'
        "500":
          description: 'Internal Server Error: Error during data processing or database
            insertion.'
      summary: Submit ticket inspector data
      tags:
      - basics
  /feedback:
    post:
      consumes:
      - application/json
      description: |-
        Accepts a JSON payload containing user feedback and stores it in the database.
        This endpoint validates that the feedback is not empty before saving it.
      parameters:
      - description: User feedback data
        in: body
        name: feedbackData
        required: true
        schema:
          $ref: '#/definitions/feedback.FeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Feedback submitted successfully
          schema:
            $ref: '#/definitions/feedback.FeedbackResponse'
        "400":
          description: Invalid request or empty feedback
          schema:
            $ref: '#/definitions/feedback.FeedbackResponse'
        "500":
          description: Failed to save feedback
          schema:
            $ref: '#/definitions/feedback.FeedbackResponse'
      summary: Submit user feedback
      tags:
      - feedback
  /lines:
    get:
      description: |-
        Retrieves information about all available transit lines.
        This endpoint returns a list of all transit lines and their associated stations.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all lines data.
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "500":
          description: 'Internal Server Error: Error retrieving lines data.'
      summary: Get all lines
      tags:
      - lines
  /lines/{lineId}/{stationId}/statistics:
    get:
      description: |-
        Retrieves statistics for a specific line at a specific station.
        This endpoint returns the number of reports for the specified line at the given station within the given time range.
      parameters:
      - description: ID of the line
        in: path
        name: lineId
        required: true
        type: string
      - description: ID of the station
        in: path
        name: stationId
        required: true
        type: string
      - description: 'Start time for the statistics (format: RFC3339)'
        in: query
        name: start
        type: string
      - description: 'End time for the statistics (format: RFC3339)'
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved line statistics.
          schema:
            $ref: '#/definitions/statistics.Statistics'
        "400":
          description: 'Bad Request: Invalid time format.'
          schema: {}
        "500":
          description: 'Internal Server Error: Failed to get number of reports.'
          schema: {}
      summary: Get line statistics
      tags:
      - lines
  /lines/{lineName}:
    get:
      description: |-
        Retrieves information about a specific transit line.
        This endpoint returns the details of a single line, including all its stations, based on the provided line name.
      parameters:
      - description: Name of the line (e.g., S1, U2)
        in: path
        name: lineName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the specified line data.
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "404":
          description: 'Line not found: The specified line does not exist.'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Error retrieving line data.'
      summary: Get a single line
      tags:
      - lines
  /lines/segments:
    get:
      description: |-
        Retrieves information about all available transit segments.
        A segment is the geojson lineString part of a line between two stations.
      produces:
      - application/json
      responses:
        "200":
          description: GeoJSON segments data
          schema:
            $ref: '#/definitions/utils.SegmentsCollection'
        "304":
          description: Not Modified
        "500":
          description: 'Internal Server Error: Error retrieving segments data.'
          schema: {}
      summary: Get all segments
      tags:
      - lines
  /stations:
    get:
      description: |-
        Retrieves information about all available stations.
        This endpoint returns a list of all stations and their details.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/utils.Station'
            type: object
        "500":
          description: 'Internal Server Error: Error retrieving stations data.'
      summary: Get all stations
      tags:
      - stations
  /stations/{stationId}:
    get:
      description: |-
        Retrieves information about a specific station based on its ID.
        This endpoint returns the details of a single station.
      parameters:
      - description: ID of the station
        in: path
        name: stationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the specified station data.
          schema:
            $ref: '#/definitions/utils.StationListEntry'
        "404":
          description: 'Station not found: The specified station does not exist.'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a single station by ID
      tags:
      - stations
  /stations/{stationId}/statistics:
    get:
      description: |-
        Retrieves statistics for a specific station.
        This endpoint returns the number of reports for the specified station within the given time range.
      parameters:
      - description: ID of the station
        in: path
        name: stationId
        required: true
        type: string
      - description: ID of the line (optional)
        in: query
        name: lineId
        type: string
      - description: 'Start time for the statistics (format: RFC3339)'
        in: query
        name: start
        type: string
      - description: 'End time for the statistics (format: RFC3339)'
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved station statistics.
          schema:
            $ref: '#/definitions/statistics.Statistics'
        "400":
          description: 'Bad Request: Invalid time format.'
          schema: {}
        "500":
          description: 'Internal Server Error: Failed to get number of reports.'
          schema: {}
      summary: Get station statistics
      tags:
      - stations
  /stations/search:
    get:
      description: |-
        Searches for a station using the provided name and returns the matching station information.
        This endpoint is case and whitespace insensitive and returns the first exact match found.
      parameters:
      - description: Name of the station to search for
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully found and retrieved the station data.
          schema:
            additionalProperties:
              $ref: '#/definitions/utils.StationListEntry'
            type: object
        "400":
          description: 'Bad Request: Missing station name parameter.'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'Station not found: No station matches the provided name.'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search for a station by name
      tags:
      - stations
  /transit/distance:
    get:
      consumes:
      - application/json
      description: |-
        Returns the shortest number of stations between an inspector's station and a given user's latitude and longitude coordinates.
        The distance calculation employs Dijkstra's algorithm to determine the minimal stops required to reach the nearest station from the given coordinates.
      parameters:
      - description: The station Id of the inspector's current location.
        in: query
        name: inspectorStationId
        required: true
        type: string
      - description: The station Id of the user's current location.
        in: query
        name: userStationId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: The shortest distance in terms of the number of station stops
            between the inspector's station and the user's location.
          schema:
            type: int
        "500":
          description: An error occurred in processing the request.
      summary: Calculate shortest distance to a station
      tags:
      - transit
  /v0/risk-prediction/segment-colors:
    get:
      description: |-
        Retrieves risk predictions for transit segments.
        This endpoint returns color-coded risk levels for different segments of the transit network based on recent ticket inspector activity.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved risk segments data
          schema:
            $ref: '#/definitions/v0.v0RiskData'
        "500":
          description: 'Internal Server Error: Failed to execute risk model'
      summary: Get risk segments
      tags:
      - prediction
  /v0/transit/itineraries:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves possible routes between two stations, including a safest itinerary based on risk prediction.
        This endpoint calculates multiple itinerary options and enriches them with risk data from the risk prediction model.
        The response includes both the safest itinerary and alternative itineraries, sorted by their calculated risk.
      parameters:
      - description: Start station ID
        in: query
        name: startStation
        required: true
        type: string
      - description: End station ID
        in: query
        name: endStation
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved route options
          schema:
            $ref: '#/definitions/itineraries.ItinerariesResponse'
        "400":
          description: 'Bad Request: Missing or invalid station IDs'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Internal Server Error: Failed to process route data'
          schema:
            additionalProperties:
              type: string
            type: object
        "502":
          description: 'Bad Gateway: Failed to fetch route from engine'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get route itineraries between two stations
      tags:
      - transit
  /v1/risk-prediction/segment-colors:
    get:
      description: |-
        Retrieves risk predictions for transit segments.
        This endpoint returns color-coded risk levels along with the risk value for different segments of the transit network based on recent ticket inspector activity.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved risk segments data
          schema:
            $ref: '#/definitions/prediction.RiskData'
        "500":
          description: 'Internal Server Error: Failed to execute risk model'
      summary: Get risk segments
      tags:
      - prediction
swagger: "2.0"
