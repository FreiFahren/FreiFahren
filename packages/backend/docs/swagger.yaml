definitions:
  utils.Coordinates:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  utils.InspectorRequest:
    properties:
      author:
        description: is always null or 98111116 (ASCII for "BOT") when getting data
          from the telegram bot
        type: integer
      directionId:
        type: string
      line:
        type: string
      message:
        type: string
      stationId:
        type: string
      timestamp:
        type: string
    type: object
  utils.ResponseData:
    properties:
      author:
        type: integer
      direction:
        $ref: '#/definitions/utils.Station'
      line:
        type: string
      message:
        type: string
      station:
        $ref: '#/definitions/utils.Station'
      timestamp:
        type: string
    type: object
  utils.RiskModelResponse:
    properties:
      last_modified:
        type: string
      segment_colors:
        additionalProperties:
          type: string
        type: object
    type: object
  utils.Station:
    properties:
      coordinates:
        $ref: '#/definitions/utils.Coordinates'
      id:
        type: string
      lines:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  utils.TicketInspectorResponse:
    properties:
      direction:
        $ref: '#/definitions/utils.Station'
      isHistoric:
        type: boolean
      line:
        description: String is used so that it can easily be handled by the frontend
        type: string
      message:
        type: string
      station:
        $ref: '#/definitions/utils.Station'
      timestamp:
        type: string
    type: object
info:
  contact: {}
paths:
  /basics/inspectors:
    get:
      consumes:
      - application/json
      description: |-
        This endpoint retrieves ticket inspector reports from the database within a specified time range.
        It supports filtering by start and end timestamps,
        and checks if the data has been modified since the last request using the "If-Modified-Since" header.
      parameters:
      - description: Start timestamp (RFC3339 format)
        in: query
        name: start
        type: string
      - description: End timestamp (RFC3339 format)
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.TicketInspectorResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Retrieve information about ticket inspector reports
      tags:
      - basics
    post:
      consumes:
      - application/json
      description: |-
        Accepts a JSON payload with details about a ticket inspector's current location.
        This endpoint validates the provided data, processes necessary computations for linking stations and lines,
        inserts the data into the database, and triggers an update to the risk model used in operational analysis.
        If the 'timestamp' field is not provided in the request, the current UTC time truncated to the nearest minute is used automatically.
      parameters:
      - description: Data about the inspector's location and activity
        in: body
        name: inspectorData
        required: true
        schema:
          $ref: '#/definitions/utils.InspectorRequest'
      - description: Timestamp of the report in ISO 8601 format (e.g., 2006-01-02T15:04:05Z);
          if not provided, the current time is used
        in: query
        name: timestamp
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully processed and inserted the inspector data with
            computed linkages and risk model updates.
          schema:
            $ref: '#/definitions/utils.ResponseData'
        "400":
          description: 'Bad Request: Missing or incorrect parameters provided.'
        "500":
          description: 'Internal Server Error: Error during data processing or database
            insertion.'
      summary: Submit ticket inspector data
      tags:
      - basics
  /lines:
    get:
      description: |-
        Retrieves information about all available transit lines.
        This endpoint returns a list of all transit lines and their associated stations.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all lines data.
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "500":
          description: 'Internal Server Error: Error retrieving lines data.'
      summary: Get all lines
      tags:
      - lines
  /lines/{lineName}:
    get:
      description: |-
        Retrieves information about a specific transit line.
        This endpoint returns the details of a single line, including all its stations, based on the provided line name.
      parameters:
      - description: Name of the line (e.g., S1, U2)
        in: path
        name: lineName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the specified line data.
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "404":
          description: 'Line not found: The specified line does not exist.'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Error retrieving line data.'
      summary: Get a single line
      tags:
      - lines
  /risk-prediction/segment-colors:
    get:
      consumes:
      - application/json
      description: |-
        Fetches the latest risk assessments for transit segments, returned as color codes representing the risk level. You can find out more about the risk level calculation in the documentation.
        The response includes the last modified timestamp of the risk model data to support conditional GET requests.
      parameters:
      - description: Standard HTTP header used to make conditional requests; the response
          will include the risk colors only if they have changed since this date and
          time.
        in: header
        name: If-Modified-Since
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the color-coded risk levels for each
            segment.
          schema:
            $ref: '#/definitions/utils.RiskModelResponse'
        "304":
          description: 'No changes: The data has not been modified since the last
            request date provided in the ''If-Modified-Since'' header.'
          schema:
            type: none
        "500":
          description: 'Internal Server Error: Error during the processing of the
            request.'
      summary: Get risk colors for segments
      tags:
      - Risk Prediction
  /transit/distance:
    get:
      consumes:
      - application/json
      description: |-
        Returns the shortest number of stations between an inspector's station and a given user's latitude and longitude coordinates.
        The distance calculation employs Dijkstra's algorithm to determine the minimal stops required to reach the nearest station from the given coordinates.
      parameters:
      - description: The station Id of the inspector's current location.
        in: query
        name: inspectorStationId
        required: true
        type: string
      - description: The station Id of the user's current location.
        in: query
        name: userStationId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: The shortest distance in terms of the number of station stops
            between the inspector's station and the user's location.
          schema:
            type: int
        "500":
          description: An error occurred in processing the request.
      summary: Calculate shortest distance to a station
      tags:
      - transit
swagger: "2.0"
