{
    "ignorePatterns": ["build/*", "node_modules/*"],
    "extends": [
      "airbnb",
      "airbnb-typescript",
      "airbnb/hooks",
      "plugin:react/recommended",
      "plugin:react/jsx-runtime",
      "plugin:react-hooks/recommended",
      "prettier",
      "plugin:@tanstack/query/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "project": "./tsconfig.json",
      "sourceType": "module",
      "ecmaFeatures": {
        "jsx": true
      }
    },
    "settings": {
      "react": {
        "version": "detect"
      }
    },
    "plugins": [
      "@typescript-eslint",
      "prefer-arrow",
      "unicorn",
      "simple-import-sort",
      "prettier",
      "react-compiler",
      "react-hooks",
      "react"
    ],
    "rules": {
      "react/prop-types": "off",
      "eqeqeq": ["error", "always"],
      "no-console": "error",
      "no-continue": "off",
      "max-classes-per-file": "off",
      "no-warning-comments": "warn",
      "simple-import-sort/imports": "error",
      "simple-import-sort/exports": "error",
      "no-restricted-syntax": [
        "error",
        {
          "selector": "ForInStatement",
          "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
        },
        {
          "selector": "LabeledStatement",
          "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
        },
        {
          "selector": "WithStatement",
          "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
        }
      ],
      "prefer-destructuring": [
        "error",
        {
          "array": true,
          "object": true
        }
      ],
      "prefer-arrow-callback": "error",
      "import/order": "off",
      "import/no-namespace": "error",
      "import/no-self-import": "error",
      "import/no-default-export": "off",
      "import/prefer-default-export": "off",
      "react/jsx-props-no-spreading": "off",
      "react/require-default-props": "off",
      "react/destructuring-assignment": [
        "error",
        "always",
        { "destructureInSignature": "always" }
      ],
      "react/function-component-definition": [
        "error",
        {
          "namedComponents": "arrow-function",
          "unnamedComponents": "arrow-function"
        }
      ],
      "no-param-reassign": [
        "error",
        {
          "props": true,
          "ignorePropertyModificationsFor": ["zustandState", "draft"]
        }
      ],
      "prefer-arrow/prefer-arrow-functions": [
        "error",
        {
          "disallowPrototype": true
        }
      ],
      "@typescript-eslint/no-explicit-any": "warn",
      "@typescript-eslint/prefer-nullish-coalescing": "error",
      "@typescript-eslint/no-unnecessary-condition": "warn",
      "@typescript-eslint/strict-boolean-expressions": [
        "error",
        {
          "allowNumber": false
        }
      ],
      "unicorn/no-useless-spread": "error",
      "unicorn/prevent-abbreviations": [
        "error",
        {
          "replacements": {
            "err": false,
            "e": {
              "err": true
            },
            "prop": false,
            "props": false,
            "ref": false,
            "param": false,
            "params": false,
            "res": false,
            "i": false,
            "prev": false,
            "acc": false,
            "curr": false,
            "val": false,
            "temp": false,
            "tmp": {
              "temp": true
            },
            "dev": false,
            "env": false
          }
        }
      ],
      "react/jsx-uses-react": "off",
      "react/react-in-jsx-scope": "off",
      "react-compiler/react-compiler": "error",
      "react/jsx-no-leaked-render": [
        "error",
        { "validStrategies": ["ternary"] }
      ],
      "react/jsx-handler-names": [
        "error",
        {
          "eventHandlerPrefix": "handle",
          "eventHandlerPropPrefix": "on",
          "checkLocalVariables": true
        }
      ],
      "react/jsx-no-useless-fragment": ["error", { "allowExpressions": true }],
      "react/jsx-boolean-value": ["error", "never"],
      "react/no-array-index-key": "error",
      "react/no-unstable-nested-components": ["error", { "allowAsProps": false }],
      "react/hook-use-state": ["error", { "allowDestructuredState": true }]
    }
  }